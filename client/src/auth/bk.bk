/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */

import { useAuth } from "@/context/AuthContext";
import Header from "@/layout/Header";
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";

declare const chrome: any;

function GoogleLogin() {
  const { login } = useAuth();
  const navigate = useNavigate();
  const [load, setLoad]=useState(false)

  const handleLogin = () => {
    getToken(true);
  };

  const getToken = async (interactive: boolean) => {
    chrome.identity.getAuthToken({ interactive }, function (token: any) {
      if (chrome.runtime.lastError) {
          console.error(chrome.runtime.lastError.message);
        return;
      }
      validateToken(token);
    });
  };

  const validateToken = async (token: string) => {
    fetch(
      `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${token}`,
    )
      .then((response) => response.json())
      .then((data) => {
        if (data.error === "invalid_token") {
          // Remove the cached token
          chrome.identity.removeCachedAuthToken({ token: token }, function () {
            console.log("Token cleared.");
            revokeToken(token); // Optional: Revoke the token from Google
          });
          return;
        }
        userInfo(token);
      })
      .catch((error) => {
        console.error("Error verifying token:", error);
      });
  };

  const revokeToken = (token: string) => {
    fetch(`https://accounts.google.com/o/oauth2/revoke?token=${token}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
    })
      .then((response) => {
        if (response.ok) {
          console.log("Token revoked successfully.");
        } else {
          console.error("Failed to revoke token:", response.status);
        }
      })
      .catch((error) => {
        console.error("Error revoking token:", error);
      });
  };

  const userInfo = (token: string) => {
    fetch("https://www.googleapis.com/oauth2/v1/userinfo?alt=json", {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to fetch user info.");
        }
        return response.json();
      })
      .then((userInfo) => {
        login({
          email: userInfo.email,
          name: userInfo.name,
          picture: userInfo.picture,
        });
        navigate("/home");
      })
      .catch((error) => {
        console.error("Error fetching user info:", error);
      });
  };

  useEffect(() => {
    getToken(false);
  }, []);


  return (
    <div>
      <Header></Header>
      {if(load){
    return <></>;
  }}

      <div className="max-h-[80] px-3 flex flex-col items-center justify-center min-h-screen bg-gray-100">
        <div className="bg-white shadow-lg rounded-lg p-6 w-full max-w-sm mx-10">
          <img
            src="/assets/cover.jpeg"
            alt="Logo"
            className="w-90 h-90 mx-auto mb-4"
          />
          <h1 className="text-2xl text-center text-gray-700 mb-4 font-sans">
            Smart Summarize
          </h1>
          <p className="text-center text-gray-500 mb-6">
            Sign in with your Google account to continue.
          </p>
          <button
            onClick={handleLogin}
            className="flex items-center justify-center w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md"
          >
            <img
              src="https://cdn-teams-slug.flaticon.com/google.jpg"
              alt="Google logo"
              className="w-6 h-6 mr-2"
            />
            Continue with Google
          </button>
        </div>
      </div>
    </div>
  );
}

export default GoogleLogin;
